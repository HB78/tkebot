// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Déclaration du type enum pour le rôle de l'utilisateur
enum UserRole {
  SYSTEM
  USER
}

// Déclaration de la table User
model User {
  id             String     @id @default(cuid())
  email          String     @unique
  username       String?
  role           UserRole?  @default(USER)
  job            String     @default("poste inconnu")
  chatsOwned     Chat[]     @relation("chatOfUser")
  messagesOwned  Message[]  @relation("messageOfUser")
  emailVerified  DateTime?  @map("email_verified")
  password       String
  isAdmin        Boolean    @default(false)
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

// Déclaration de la table Chats
model Chat {
  id          String       @id @default(cuid())
  pdfName     String
  pdfUrl      String
  createdAt   DateTime    @default(now())
  user        User        @relation("chatOfUser", fields: [userId], references: [id])
  userId      String   
  fileKey     String
  messages    Message[]   @relation("messageOfChat")
}

// Déclaration de la table Messages
model Message {
  id          String       @id @default(cuid())
  content     String
  createdAt   DateTime     @default(now())
  role        UserRole
  user        User         @relation("messageOfUser", fields: [userId], references: [id])
  userId      String     
  chat        Chat         @relation("messageOfChat", fields: [chatId], references: [id])
  chatId      String       
}

/////////////////////////////////////// PARTIE AUTHENTIFICATION //////////////////////////////////////////
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
